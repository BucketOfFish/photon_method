#include <algorithm>
#include <iostream>
#include <iomanip>
#include <vector>
#include <math.h>
#include <fstream>
#include <sstream>

#include "TCanvas.h"
#include "TLegend.h"
#include "TChain.h"
#include "TDirectory.h"
#include "TFile.h"
#include "TROOT.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TMath.h"
#include "TPad.h"
#include "TCut.h"
#include "TProfile.h"
#include "THStack.h"
#include "TLatex.h"
#include "TGraphErrors.h"
#include "TStyle.h"
#include "TLine.h"
#include "TMath.h"

using namespace std;

TH1F* GetSimpleReweightingHistograms(int isData, string label , string period = "data15-16" , string channel  = "mm" , string smearing_mode = "NoSmear" ){

//std::vector<TH1F*>* GetSimpleReweightingHistograms( string label , string period = "data15-16" , string channel = "mm", string smearing_mode = "NoSmear" ){

  cout << "Doing histograms for period and year " << period << " " << channel << endl;
  gStyle->SetOptStat(0);
  
  //--- set up labels
  string mcdir      = "";
  string gdatalabel = "";
  if     ( TString(period).EqualTo("data15-16") ){
    mcdir    = "MC16a/";
    gdatalabel = "data15-16";
  }
  else if( TString(period).EqualTo("data17")    ){
    mcdir    = "MC16cd/";
    gdatalabel = "data17";
  }
  else if( TString(period).EqualTo("data18")    ){
    mcdir    = "MC16cd_2018/";
    gdatalabel = "data18";
  }

  //--- set up MC period
  string mcperiod = "";
  if( TString(period).EqualTo("data15-16") ) mcperiod = "ZMC16a/";
  if( TString(period).EqualTo("data17")    ) mcperiod = "ZMC16cd/";
  if( TString(period).EqualTo("data18")    ) mcperiod = "ZMC16cd/";

  //--- set up photon data period
  string gperiod = "";
  if( TString(period).EqualTo("data15-16") ) gperiod = "Data15-16";
  if( TString(period).EqualTo("data17")    ) gperiod = "Data17";
  
  string zjets_filename  = smearingPath + "ZMC16a/Zjets_merged_processed.root";
  string photon_filename = smearingPath + "gmc/" + "gmc"+ "_" + channel  + smearing_mode + ".root";
    
  cout << "Opening Z+jets file  " << zjets_filename << endl;
  cout << "Opening photon file  " << photon_filename << endl;

  TChain* chzjets = new TChain("BaselineTree");
  TChain* chg     = new TChain("BaselineTree");

  chzjets->Add( zjets_filename.c_str() );
  chg->Add( photon_filename.c_str() );
  
  cout << "Z+jets entries       " << chzjets->GetEntries()  << endl;
  cout << "photon entries       " << chg->GetEntries()      << endl;

  // define selections and weights
  TCut Zselection("mll>81 && mll<101 && jet_n >= 2 && is_OS && lep_pT[0]>25.0 && lep_pT[1]>25.0 && bjet_n==0");
  //TCut Zweight("totalWeight");

  TCut ee("channel==1");
  TCut mm("channel==0");

  if     ( TString(channel).EqualTo("ee") ) Zselection += ee;
  else if( TString(channel).EqualTo("mm") ) Zselection += mm;
  else{
    cout << "Unrecognized channel! quitting   " << channel << endl;
    exit(0);
  }

  TCut gselection("lep_pT[0]>25 && lep_pT[1]>25 && jet_n>=2 && bjet_n == 0");
  TCut weight("totalWeight");///////CHANGE HERE FOR HT+Zpt REWEIGHT
  TCut g_rw("ptreweight9");
  TCut lumi("1.0");

  if( TString(period).EqualTo("data15-16") ) lumi = TCut("36100");
  if( TString(period).EqualTo("data17")    ) lumi = TCut("44100");
  if( TString(period).EqualTo("data18")    ) lumi = TCut("64610");
     
  cout << "Z selection          " << Zselection.GetTitle() << endl;
  cout << "g selection          " << gselection.GetTitle() << endl;
  cout << "weight               " << weight.GetTitle()     << endl;
  cout << "lumi                 " << lumi.GetTitle()       << endl;
  
  // define histograms for Pt reweighting 
  const unsigned int nptbins = 16;
  double ptbins[nptbins+1] = {40, 75, 100, 125, 150, 175, 200, 250, 300, 350, 400, 450, 500, 600, 700, 850, 1000};

  TH1F* histoG = new TH1F("histoG" ,"",nptbins,ptbins);    
  TH1F* histoZ = new TH1F("histoZ" ,"",nptbins,ptbins); 

  //chzjets->Draw("min(Z_pt,999)>>histoZ"     ,Zselection*weight*lumi,"goff");
  //chg    ->Draw("min(Z_pt,999)>>histoG" ,gselection*lumi*weight,"goff");
  chzjets->Draw("HT>>histoZ" ,Zselection*lumi*weight,"goff");
  chg    ->Draw("HT>>histoG" ,gselection*lumi*weight*g_rw,"goff");//STEP 2
  //chg    ->Draw("Z_pt>>histoG" ,gselection*lumi*weight,"goff");//STEP 1

  cout << "Z+jets integral      " << histoZ->Integral()      << endl;
  cout << "photon integral      " << histoG->Integral()  << endl;


  // Make pT histo as a first check 
  TCanvas *can2 = new TCanvas("can2","can2",600,600);
  can2->cd();

  TH1F* ptRatio = (TH1F*) histoZ->Clone("ptRatio");
  ptRatio->Divide( histoG );

  //------------------------------------------------------
  //------------- HT reweighting histos-------------------
  //------------------------------------------------------ 
  // define histograms
  /*
  const unsigned int nhtbins = 16;
  double htbins[nhtbins+1] = {40, 75, 100, 125, 150, 175, 200, 250, 300, 350, 400, 450, 500, 600, 700, 850, 1000};

  TH1F* histoG_ht = new TH1F("histoG_ht" ,"",nhtbins,htbins);
  TH1F* histoZ_ht = new TH1F("histoZ_ht" ,"",nhtbins,htbins);

  //chzjets->Draw("min(Z_pt,999)>>histoZ"     ,Zselection*weight*lumi,"goff");
  //chg    ->Draw("min(Z_pt,999)>>histoG" ,gselection*lumi*weight,"goff");
  chzjets->Draw("HT>>histoZ_ht"     ,Zselection*weight*lumi,"goff");
  chg    ->Draw("HT>>histoG_ht" ,gselection*lumi*weight,"goff");

  cout << "Z+jets integral, HT      " << histoZ_ht->Integral()      << endl;
  cout << "photon integral, HT      " << histoG_ht->Integral()  << endl;


  // Make pT histo as a first check
  //TCanvas *can2 = new TCanvas("can2","can2",600,600);
  //can2->cd();

  TH1F* htRatio = (TH1F*) histoZ_ht->Clone("htRatio");
  htRatio->Divide( histoG_ht );
*/


  /*
  std::cout << "CHECKPOINT: Checking histogram bins before reweighting" << std::endl;
  std::cout << "histoZ" << std::endl;
  for (int i=0; i<=nptbins; i++)
    std::cout << histoZ->GetBinContent(i) << std::endl;
  std::cout << "histoG" << std::endl;
  for (int i=0; i<=nptbins; i++)
    std::cout << histoG->GetBinContent(i) << std::endl;
	    std::cout << "ratio" << std::endl;
  for (int i=0; i<=nptbins; i++)
    std::cout << hratio->GetBinContent(i) << std::endl;
  std::cout << "CHECKPOINT: Finished checking histogram bins before reweighting" << std::endl;
*/

  can2->Divide(1,2);
  can2->cd(2);

  histoG->GetXaxis()->SetTitle("HT [GeV]");
  //histoG->GetXaxis()->SetTitle("Z p_{T} [GeV]");
  histoG->GetYaxis()->SetTitle("entries / bin");

  gPad->SetLogy();
  
  histoZ->SetLineColor(2);
  histoG->SetLineColor(4);

  histoG->Draw("hist");
  histoZ->Draw("samehist");

  
  TLegend* leg2 = new TLegend(0.7,0.7,0.88,0.88);
  leg2->AddEntry(histoZ,"Z+jets","f");
  leg2->AddEntry(histoG,"photon","f");
  leg2->SetBorderSize(0);
  leg2->SetFillColor(0);
  leg2->Draw();

  can2->cd(1);
  ptRatio->SetLineColor(1);
  ptRatio->Draw("hist");
  
  can2->Print(Form("plots/v1.3/GetSimpleReweightingHistograms_%s_%s%s_Z_vs_g.pdf",label.c_str(),channel.c_str(),smearing_mode.c_str()));

  cout << "histoG->Integral() " << histoG->Integral() << endl;
  cout << "histoZ->Integral() " << histoZ->Integral() << endl;
  cout << "ptRatio->Integral() " << ptRatio->Integral() << endl;
  //cout << "htRatio->Integral() " << htRatio->Integral() << endl;

  /*
  std::vector<TH1F*>* returnValues = new std::vector<TH1F*>(2);
  returnValues->push_back(ptRatio);
  returnValues->push_back(htRatio);
  */
  //return returnValues;
  return ptRatio;
}
